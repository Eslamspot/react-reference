{"version":3,"sources":["components/card.jsx","components/cardlist.jsx","components/SearchBox.jsx","components/CounterButton.jsx","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Cart","id","name","email","className","alt","src","CardList","robots","cards","map","data","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","CounterButton","countPlus","setState","state","count","nextProps","nextState","console","log","this","onClick","Component","App","props","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","trim","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddlewware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7b340d9c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cart = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green bid br4 pa4 grow bw2  fl w-25 ma2 \">\n      <img alt=\"something\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport Cart from \"./card\";\n\nconst CardList = ({ robots }) => {\n  const cards = robots.map((data, i) => {\n    return (\n      <Cart\n        key={robots[i].id}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cards}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue \"\n        type=\"search\"\n        placeholder=\"Robot\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"nextProps\", nextProps, \"nextState:\", nextState);\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  countPlus = () => {\n    this.setState((state) => {\n      return { count: this.state.count + 1 };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.countPlus}>\n          click to count {this.state.count}{\" \"}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\n// The below line use to import data from file, We don't need it because we used API\n// import { robots } from \"./components/robots\";\nimport CardList from \"./components/cardlist\";\nimport SearchBox from \"./components/SearchBox\";\nimport { setSearchField, requestRobots } from \"./actions\";\nimport CounterButton from \"./components/CounterButton\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nclass App extends Component {\n  /**\n   No need to use constructor with redux \n    if you can use start and redux in same project  you have to activate it back \n  */\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //     searchField: \"\",\n  //   };\n  // }\n\n  // We didn't use this function because we moved to redux\n  // Function to catch search field in html\n  // onSearchChange = (event) => {\n  //   this.setState({ searchField: event.target.value });\n  // };\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //   .then((response) => response.json())\n    //   .then((users) => this.setState({ robots: users }));\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase().trim());\n    });\n    return (\n      <div className=\"tc\">\n        <h1>This is app page</h1>\n        <CounterButton />\n        <SearchBox searchChange={onSearchChange} />\n        {isPending ? <h1>Loading...</h1> : <CardList robots={filteredRobots} />}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\n// generate empty variable as below to not get error before function start working\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n// Import for react\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\n\n// Redux Thunk to handel async for data\nimport thunkMiddlewware from \"redux-thunk\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddlewware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}